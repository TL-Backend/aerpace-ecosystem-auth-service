paths:
  /users:
    get:
      security:
        - Authorization: []
      tags:
        - USERS
      summary: All the active users will be listed.
      parameters:
        - name: search
          in: query
          description: Search will be applied to first name, last name, role name, email, phone number, location.
          schema:
            type: string
            example: aditya
        - name: role
          in: query
          description: Filter will be applied based on the role selected.
          schema:
            type: string
            example: Admin
        - name: location
          in: query
          description: Filter will be applied based on the location selected.
          schema:
            type: string
            example: Andhra Pradesh
        - name: page_number
          in: query
          description: Number of the page to be shown.
          schema:
            type: integer
            example: 1
        - name: page_limit
          in: query
          description: Limit of items per page.
          schema:
            type: integer
            example: 10
        - name: Authorization
          in: headers
          description: Id token to be provided to access.
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/listUserSuccess'
        401:
          $ref: '#/components/responses/UnauthorizedSomethingWentWrong'
        403:
          $ref: '#/components/responses/forbiddenRequest'
        500:
          $ref: '#/components/responses/internalError'
    post:
      security:
        - Authorization: []
      tags:
        - USERS
      summary: To create a new user with valid email.
      parameters:
        - name: Authorization
          in: headers
          description: Id token to be provided to access
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/addUser'
      responses:
        200:
          $ref: '#/components/responses/addUserSuccess'
        401:
          $ref: '#/components/responses/UnauthorizedSomethingWentWrong'
        403:
          $ref: '#/components/responses/forbiddenRequest'
        400:
          $ref: '#/components/responses/addUserSomethingWentWrong'
        500:
          $ref: '#/components/responses/internalError'
  /users/{id}:
    patch:
      security:
        - Authorization: []
      tags:
        - USERS
      summary: To update user details and his role.
      parameters:
        - name: id
          in: path
          description: User Id to be provided to edit that particular user details.
          schema:
            type: string
            example: aditya
        - name: Authorization
          in: headers
          description: Id token to be provided to access.
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/editUser'
      responses:
        200:
          $ref: '#/components/responses/editUserSuccess'
        401:
          $ref: '#/components/responses/UnauthorizedSomethingWentWrong'
        403:
          $ref: '#/components/responses/forbiddenRequest'
        400:
          $ref: '#/components/responses/editUserSomethingWentWrong'
        500:
          $ref: '#/components/responses/internalError'
  /users/config:
    get:
      security:
        - Authorization: []
      tags:
        - USERS
      summary: Config api.
      parameters:
        - name: id
          in: query
          description: User Id to be provided to fetch the config details.
          schema:
            type: string
            example: aditya
      responses:
        200:
          $ref: '#/components/responses/configSuccess'
        401:
          $ref: '#/components/responses/UnauthorizedSomethingWentWrong'
        403:
          $ref: '#/components/responses/forbiddenRequest'
        404:
          $ref: '#/components/responses/configDataNotFound'
        500:
          $ref: '#/components/responses/internalError'