components:
  schemas:
    roles:
      description: "Roles data"
      type: object
      properties:
        id:
          type: string
          example: "1"
        role_name:
          type: string
          example: "Role manager"
        permission_list:
          type: array
          example: ["USERS#ROLES_TAB#TAB_LIST_VIEW"]
        permission_tree:
          type: array
          items:
            $ref: "#/components/schemas/permissionTree"
        created_at:
          type: string
          format: date-time
          example: 2023-06-14 15:19:28.836+05:30
        updated_at:
          type: string
          format: date-time
          example: 2023-06-14 15:19:28.836+05:30
    editRoles:
      description: "Roles data"
      type: object
      properties:
        id:
          type: string
          example: "r_1"

    permissionTree:
      type: object
      properties:
        name:
          type: string
          example: "Users"
        pages:
          type: array
          example:
            [
              {
                "name": "Roles",
                "pages": [],
                "features":
                  [
                    {
                      "id": 4,
                      "name": "List Roles",
                      "page_id": 3,
                      "identifier": "USERS#ROLES_TAB#TAB_LIST_VIEW",
                    },
                  ],
                "identifier": "USERS#ROLES_TAB",
              },
            ]
        features:
          type: array
          example: []
        identifier:
          type: string
          example: "USERS"

  securitySchemes:
    Authorization:
      type: apiKey
      in: header
      name: Authorization

  responses:
    listRolesSuccess:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              data:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      $ref: "#/components/schemas/roles"
              message:
                type: string
                example: "Roles fetched successfully"
    deleteRolesSuccess:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              data:
                type: object
                example: {}
              message:
                type: string
                example: "Role deleted successfully"
    editRolesSuccess:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              data:
                type: object
                $ref: "#/components/schemas/editRoles"
              message:
                type: string
                example: "Role edited successfully"

    addRoleBadRequest:
      description: "Bad Request"
      content:
        application/json:
          examples:
            example1:
              summary: 400 - Feature do not exists
              value:
                code: 400
                data: {}
                message: "Features do not exist, please send a proper set of features"
            example2:
              summary: 400 - Role already exists with same name
              value:
                code: 400
                data: {}
                message: "Role already exists with this name, please try with new name"
            example3:
              summary: 400 - Failed to fetch master permissions
              value:
                code: 400
                data: {}
                message: "failed to fetch master permission tree"
    deleteRoleBadRequest:
      description: "Bad request"
      content:
        application/json:
          examples:
            example1:
              summary: 400 - Cannot delete roles that are in use.
              value:
                code: 400
                data: {}
                message: "Role is assigned to a user, cannot perform delete operation when role is assigned"
            example2:
              summary: 400 - Role not found
              value:
                code: 400
                data: {}
                message: "Role not found"
    editRoleBadRequest:
      description: "Bad request"
      content:
        application/json:
          examples:
            example1:
              summary: 400 - Feature do not exists
              value:
                code: 400
                data: {}
                message: "Features do not exist, please send a proper set of features"
            example2:
              summary: 400 - Role already exists with same name
              value:
                code: 400
                data: {}
                message: "Role already exists with this name, please try with new name"
            example3:
              summary: 400 - Failed to fetch master permission
              value:
                code: 400
                data: {}
                message: "failed to fetch master permission tree"
            example4:
              summary: 400 - Role not found
              value:
                code: 400
                data: {}
                message: "Role not found"
            example5:
              summary: 400 - Nothing to update
              value:
                code: 400
                data: {}
                message: "Nothing to update"

    unauthorizedRequest:
      description: "Unauthorized request"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                type: object
                example: {}
              message:
                type: string
                example: "Something went wrong"
    forbiddenRequest:
      description: "Forbidden request"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                type: object
              message:
                type: string
                example: "Something went wrong"
          examples:
            example1:
              summary: 403 - Access Denied
              value:
                code: 403
                data: {}
                message: "Access Denied"
            example2:
              summary: 403 - Something went wrong
              value:
                code: 403
                data: {}
                message: "Something went wrong"
    internalError:
      description: "Internal Server Error"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 500
              data:
                type: object
                example: {}
              message:
                type: string
                example: "Something went wrong"

  requestBodies:
    addRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              role_name:
                type: string
                example: "Role manager"
              permissions:
                type: array
                example:
                  [
                    "USERS_MANAGEMENT#USERS_TAB#TAB_LIST_VIEW",
                    "USERS_MANAGEMENT#USERS_TAB#EDIT_USER",
                  ]
          examples:
            example1:
              summary: Success
              value:
                role_name: Role manager
                permissions:
                  ["USERS_MANAGEMENT#USERS_TAB#ADD_USER",]
            example2:
              summary: Role already exists with the name
              value:
                role_name: Admin
                permissions:
                  ["USERS_MANAGEMENT#USERS_TAB#ADD_USER",]
            example3:
              summary: Feature doesn't exists
              value:
                role_name: Admin
                permissions: ["USER", "USERS#ROLES_TAB#ADD_ROLE"]
    editRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              role_name:
                type: string
                example: "Role manager"
              permissions:
                type: array
                example:
                  [
                    "USERS_MANAGEMENT#USERS_TAB#TAB_LIST_VIEW",
                    "USERS_MANAGEMENT#USERS_TAB#EDIT_USER",
                  ]
          examples:
            example1:
              summary: Success
              value:
                role_name: Role manager
                permissions:
                  ["USERS_MANAGEMENT#USERS_TAB#ADD_USER",]
            example2:
              summary: Role already exists with the name
              value:
                role_name: Admin
                permissions:
                  ["USERS_MANAGEMENT#USERS_TAB#ADD_USER",]
            example3:
              summary: Feature doesn't exists
              value:
                role_name: Admin
                permissions: ["USER", "USERS#ROLES_TAB#ADD_ROLE"]
            example4:
              summary: Nothing to update
              value: {}
